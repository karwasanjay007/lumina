"""
Export utilities for PDF, Markdown, and JSON formats
FIXED: Properly converts markdown to ReportLab formatting
"""

import json
import re
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, Optional

try:
    from reportlab.lib.pagesizes import letter
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import inch
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak
    from reportlab.lib.enums import TA_JUSTIFY, TA_CENTER
    from reportlab.lib import colors
    REPORTLAB_AVAILABLE = True
except ImportError:
    REPORTLAB_AVAILABLE = False


def clean_markdown(text: str) -> str:
    """Convert markdown formatting to ReportLab-compatible HTML"""
    if not text:
        return ""
    
    text = re.sub(r'\*\*(.+?)\*\*', r'<b>\1</b>', text)
    text = re.sub(r'(?<!\*)\*(?!\*)(.+?)(?<!\*)\*(?!\*)', r'<i>\1</i>', text)
    text = re.sub(r'_(.+?)_', r'<i>\1</i>', text)
    text = re.sub(r'^#+\s+(.+)$', r'<b>\1</b>', text, flags=re.MULTILINE)
    text = re.sub(r'\[(.+?)\]\((.+?)\)', r'\1 (\2)', text)
    text = re.sub(r'\[\d+\]', '', text)
    text = text.replace('```', '')
    text = text.replace('`', '')
    text = ' '.join(text.split())
    return text


def export_to_markdown(results: Dict[str, Any]) -> str:
    topic = results.get('research_topic', 'Unknown Topic')
    timestamp = results.get('timestamp', datetime.now().isoformat())
    
    md_content = f"# Research Report: {topic}\n\n"
    md_content += f"*Generated: {timestamp}*\n\n"
    md_content += "---\n\n"
    
    summary = results.get('summary', '')
    if summary:
        md_content += f"## Executive Summary\n\n{summary}\n\n"
    
    key_findings = results.get('key_findings', [])
    if key_findings:
        md_content += f"## Key Findings\n\n"
        for i, finding in enumerate(key_findings, 1):
            md_content += f"{i}. {finding}\n"
        md_content += "\n"

    insights = results.get('insights', [])
    if insights:
        md_content += f"## Strategic Insights\n\n"
        for i, insight in enumerate(insights, 1):
            md_content += f"{i}. {insight}\n"
        md_content += "\n"

    agent_results = results.get('agent_results', [])
    if agent_results:
        md_content += f"## Sources\n\n"
        
        for agent_result in agent_results:
            agent_name = agent_result.get('agent_name', 'Unknown').title()
            sources = agent_result.get('sources', [])
            
            if sources:
                md_content += f"### {agent_name} ({len(sources)} sources)\n\n"
                
                for source in sources:
                    title = source.get('title', 'Untitled')
                    url = source.get('url', '#')
                    description = source.get('description', '')
                    
                    md_content += f"**[{title}]({url})**\n"
                    
                    if description:
                        if len(description) > 200:
                            description = description[:200] + "..."
                        md_content += f"{description}\n"
                    
                    md_content += "\n"

    md_content += f"---\n\n"
    md_content += f"*Generated by Multi-Agent AI Deep Researcher*\n"
    
    return md_content


def export_to_pdf(results: Dict[str, Any]) -> bytes:
    if not REPORTLAB_AVAILABLE:
        raise ImportError("ReportLab library is required for PDF export. Install it with: pip install reportlab")
    
    from io import BytesIO
    buffer = BytesIO()
    
    doc = SimpleDocTemplate(
        buffer,
        pagesize=letter,
        rightMargin=72,
        leftMargin=72,
        topMargin=72,
        bottomMargin=18,
    )
    
    story = []
    styles = getSampleStyleSheet()
    
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        textColor=colors.HexColor('#1f2937'),
        spaceAfter=30,
        alignment=TA_CENTER
    )
    
    heading_style = ParagraphStyle(
        'CustomHeading',
        parent=styles['Heading2'],
        fontSize=16,
        textColor=colors.HexColor('#374151'),
        spaceAfter=12,
        spaceBefore=12,
        bold=True
    )
    
    body_style = ParagraphStyle(
        'CustomBody',
        parent=styles['BodyText'],
        fontSize=11,
        alignment=TA_JUSTIFY,
        spaceAfter=12,
        leading=14
    )
    
    topic = results.get('research_topic', 'Research Report')
    story.append(Paragraph(f"Research Report: {topic}", title_style))
    story.append(Spacer(1, 0.3 * inch))
    
    timestamp = results.get('timestamp', datetime.now().isoformat())
    metadata_text = f"<i>Generated: {timestamp}</i>"
    story.append(Paragraph(metadata_text, styles['Normal']))
    story.append(Spacer(1, 0.5 * inch))
    
    summary = results.get('summary', '')
    if summary:
        story.append(Paragraph("Executive Summary", heading_style))
        clean_summary = clean_markdown(summary)
        story.append(Paragraph(clean_summary, body_style))
        story.append(Spacer(1, 0.2 * inch))
    
    key_findings = results.get('key_findings', [])
    if key_findings:
        story.append(Paragraph("Key Findings", heading_style))
        
        for i, finding in enumerate(key_findings, 1):
            clean_finding = clean_markdown(finding)
            story.append(Paragraph(f"{i}. {clean_finding}", body_style))
        
        story.append(Spacer(1, 0.2 * inch))
    
    insights = results.get('insights', [])
    if insights:
        story.append(Paragraph("Strategic Insights", heading_style))
        
        for i, insight in enumerate(insights, 1):
            clean_insight = clean_markdown(insight)
            story.append(Paragraph(f"{i}. {clean_insight}", body_style))
        
        story.append(Spacer(1, 0.2 * inch))
    
    agent_results = results.get('agent_results', [])
    if agent_results:
        story.append(PageBreak())
        story.append(Paragraph("Sources", heading_style))
        
        for agent_result in agent_results:
            agent_name = agent_result.get('agent_name', 'Unknown').title()
            sources = agent_result.get('sources', [])
            
            if sources:
                story.append(Paragraph(
                    f"{agent_name} ({len(sources)} sources)",
                    styles['Heading3']
                ))
                
                for source in sources:
                    title = source.get('title', 'Untitled')
                    url = source.get('url', '#')
                    description = source.get('description', '')
                    
                    story.append(Paragraph(
                        f'<b><link href="{url}">{title}</link></b>',
                        body_style
                    ))
                    
                    if description:
                        clean_desc = clean_markdown(description)
                        if len(clean_desc) > 200:
                            clean_desc = clean_desc[:200] + "..."
                        story.append(Paragraph(clean_desc, body_style))
                    
                    story.append(Spacer(1, 0.1 * inch))
    
    story.append(Spacer(1, 0.5 * inch))
    story.append(Paragraph(
        "<i>Generated by Multi-Agent AI Deep Researcher</i>",
        styles['Italic']
    ))
    
    doc.build(story)
    pdf_bytes = buffer.getvalue()
    buffer.close()
    
    return pdf_bytes


def export_to_json(results: Dict[str, Any]) -> str:
    return json.dumps(results, indent=2, ensure_ascii=False, default=str)